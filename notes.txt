Key Questions

-- What is the most useful information we can give when a user requests an
   intersection, union, or negation type if our graph has certain properties?
   - Guarantees of completeness for some number of:
    -- subtype relationships
    -- non-empty intersections
    -- disjointness


Let the following graph be an example to play with:

                           All
			 /     \ 
        G =             A~~~~~~~C
		       /       / \
		      D~~~~~~~E   F         
                       \     /   /
		        \   /   /
			 BOTTOM

~~~ means non-empty intersection
\ and / means subtype

and we want to add B to the lattice.

Let's say that the 'correct' result would be:


                           All
			 /     \ 
        G =             A~~~~~~~C     <– in the case where D~E and B~F summarize
		       / \     / \       A~C, then I suggest that we remove that edge,
		      D~~~\~~~E   \      because it can be inferred
                       \   \   \   \
		        \   B~~~~~~F
                         \ /   /  /
			  \   /  /  
                           BOTTOM

Where B is a subtype of A and has non-empty intersection with F
(no relationship between B and E)

2 tasks: maintaining the lattice, and using it.

***
Adding types (maintaining the lattice):
Users can only ask queries about types that
have been accepted into the lattice, and their
results will only use types that have been
added into the lattice.
***

-- Subtyping (part 1)

 - Whenever a suptype relationship is neither disprovable nor
   provable, we tell the user to prove theorems about those types and
   then re-try to add their type. In this example, if either B ⊆ A or
   B ⊄ C was neither provable nor disprovable, then we return with:
   "Please prove theorems about the subtype relationships between B
   and _ (A or C, depending)

 - The judment that D ⊄ B also needed to be made, similarly for all
   other children of A.

 - If, however, the subtyping decisions can be made, then part 1 is
   successful,

– Intersections (part 2)

 - Now, consider the sets of types S₁ and S,
   where S₁ = {s | s ⊆ A}, and
         S = {t | ∃s.[(s ∈ S₁) ^ (s ∩ t ≠ ∅)]} (note that {S₁ / ⊥} ⊆ S).

(for our example, S₁ = {A, D}, and S = {A, D, C, E}

 - We need to know whether or not B ∩ T = ∅, for all T ∈ S. If for any
   T ∈ S this is neither provable nor disprovable, we ask the user to
   prove theorems about the intersection of B and T. Finally, when we find
   that B ∩ C ≠ ∅, we continue to look down into C's children, to see if we
   can give a more precise description


However, if all of the desired properties can be decided about B,
then we can safely add B to the lattice.

The properties of the lattice that we wish to preserve are that for any two types A and B, it can be decided 

***
Solving queries (using the lattice):
Users can ask for the negation of a type,
intersection of two types, or union of two types
(once we have these (or a smaller set), -> and iff are easy)
***

Assuming that our graph maintains that the properties that:
For any two types T1 and T2, it is knowable from the graph
if: T1 ⊆ T2
    T1 ∩ T2 = ∅

